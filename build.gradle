import su.mandora.codechecker.CodeChecker

plugins {
    id "fabric-loom"
    id "org.jetbrains.kotlin.jvm"
}

archivesBaseName = "tarasande"
version = tarasande_version
group = "su.mandora"

loom {
    accessWidenerPath = file("src/main/resources/tarasande.accesswidener")
}

repositories {
    mavenCentral()
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    implementation "io.netty:netty-handler-proxy:4.1.82.Final" // Match with mc version
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release.set(17)
}

java {
    withSourcesJar()
}

jar {
    from {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.runtimeClasspath
                .filter { it.getName().contains("netty-handler-proxy") }
                .collect {
                    zipTree(it)
                }
    } {
        exclude "META-INF/**"
    }
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

compileKotlin.kotlinOptions.jvmTarget = "17"

tasks.register('checkCode') {
    group archivesBaseName
    dependsOn "build"
    doLast {
        CodeChecker codeChecker = new CodeChecker(sourceSets.main)
        codeChecker.check()
    }
}

tasks.register('installPackages') {
    group archivesBaseName
    dependsOn "build"
    doLast {
        File modFolder = new File("run", "mods")
        if(!modFolder.exists())
            modFolder.mkdirs()

        subprojects.findAll {it.name.startsWith("package")}.each {
            p ->
                String packageName = p.name + "-" + p.version + ".jar"
                File build = new File(p.buildDir, "libs" + File.separator + packageName)
                File modDest = new File(modFolder, packageName)
                if (build.exists()) {
                    if (modDest.delete())
                        println "Deleted old $packageName"
                    else
                        println "Failed to delete old $packageName version"
                    if (build.renameTo(modDest))
                        println "Copied $packageName"
                }
        }
    }
}
